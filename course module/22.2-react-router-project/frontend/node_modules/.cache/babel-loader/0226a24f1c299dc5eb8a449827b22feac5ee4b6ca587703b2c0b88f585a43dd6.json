{"ast":null,"code":"var _jsxFileName = \"F:\\\\react\\\\revision\\\\22.2-react-router-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.jsx\",\n  _s = $RefreshSig$();\nimport { useLoaderData, useParams, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData(\"event-details\");\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this)\n  }, void 0, false);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport async function loader({\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not find event\"\n    }), {\n      status: 500\n    });\n  }\n  const data = await response.json(); // Parse the response\n  return {\n    event: data\n  }; // Ensure the returned data includes the `event` key\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useLoaderData","useParams","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","console","log","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","params","id","eventId","response","fetch","ok","Response","JSON","stringify","message","status","json","$RefreshReg$"],"sources":["F:/react/revision/22.2-react-router-project/frontend/src/pages/EventDetail.jsx"],"sourcesContent":["import {useLoaderData, useParams, useRouteLoaderData} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\n\r\nexport default function EventDetailPage() {\r\n    const data = useRouteLoaderData(\"event-details\");console.log(data);\r\n    return (\r\n        <>\r\n           <EventItem event={data.event}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport async function loader({ params }) {\r\n    const id = params.eventId;\r\n    const response = await fetch(`http://localhost:8080/events/${id}`);\r\n    if (!response.ok) {\r\n        throw new Response(\r\n            JSON.stringify({ message: \"Could not find event\" }),\r\n            { status: 500 }\r\n        );\r\n    }\r\n\r\n    const data = await response.json(); // Parse the response\r\n    return { event: data }; // Ensure the returned data includes the `event` key\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,SAAQA,aAAa,EAAEC,SAAS,EAAEC,kBAAkB,QAAO,kBAAkB;AAC7E,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGhD,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAMC,IAAI,GAAGR,kBAAkB,CAAC,eAAe,CAAC;EAACS,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAClE,oBACIL,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACGR,OAAA,CAACF,SAAS;MAACW,KAAK,EAAEJ,IAAI,CAACI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBAChC,CAAC;AAEX;AAACT,EAAA,CAPuBD,eAAe;EAAA,QACtBN,kBAAkB;AAAA;AAAAiB,EAAA,GADXX,eAAe;AASvC,OAAO,eAAeY,MAAMA,CAAC;EAAEC;AAAO,CAAC,EAAE;EACrC,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgCH,EAAE,EAAE,CAAC;EAClE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CACdC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAuB,CAAC,CAAC,EACnD;MAAEC,MAAM,EAAE;IAAI,CAClB,CAAC;EACL;EAEA,MAAMrB,IAAI,GAAG,MAAMc,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;EACpC,OAAO;IAAElB,KAAK,EAAEJ;EAAK,CAAC,CAAC,CAAC;AAC5B;AAAC,IAAAS,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}